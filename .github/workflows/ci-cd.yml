name: Continuous Integration and Delivery

on:
    push:
        branches:
            -   '*'
        tags:
            -   release/v[0-9]+.[0-9]+.[0-9]+

env:
    PROJECT_NAME: singleton

permissions:
    id-token: write

jobs:
    integration:
        runs-on: ubuntu-latest
        outputs:
            # It would be nice to output the entire image name, but the amazon-ecr-login tasks masks the repository.
            # This masking prevents us from outputting the entire name to another job, so other jobs will need to fetch
            # the registry and repository.
            IMAGE_TAG: ${{ steps.generate-image-tag.outputs.image_tag }}
        steps:
            -   name: Configure AWS Credentials
                uses: aws-actions/configure-aws-credentials@v4
                with:
                    role-to-assume: ${{ secrets.AWS_ROLE_BUILDSYSTEM_ARN }}
                    aws-region: ${{ secrets.AWS_REGION }}

            -   name: Login to Amazon ECR
                id: login-ecr
                uses: aws-actions/amazon-ecr-login@v2

            -   name: Checkout Code
                uses: actions/checkout@v4

            -   name: Generate Image Tag
                id: generate-image-tag
                env:
                    IMAGE_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                    IMAGE_REPOSITORY: ${{ env.PROJECT_NAME }}
                    IMAGE_TAG: ${{ steps.generate-image-tag.outputs.image_tag }}
                run: |
                    image_tag=${{ github.ref_name }}-${{ github.sha }}  # TAGs cannot contain slashes.
                    image_tag=${image_tag//\//-}  # e.g. release/v0.0.0-<sha> --> release-v0.0.0-<sha>
                    echo "image_name=$IMAGE_REGISTRY/$IMAGE_REPOSITORY:$image_tag" >> "$GITHUB_OUTPUT"
                    echo "image_tag=$image_tag" >> "$GITHUB_OUTPUT"
                    echo "image_tag=$image_tag"

            -   name: Build Docker Image
                run: |
                    docker build -t ${{ steps.generate-image-tag.outputs.image_name }} .

            -   name: Push Docker Image
                run: |
                    docker push ${{ steps.generate-image-tag.outputs.image_name }}
                    echo "- Uploaded ${{ steps.generate-image-tag.outputs.image_name }}" >> $GITHUB_STEP_SUMMARY

    delivery:
        runs-on: ubuntu-latest
        needs: integration
#        if: startsWith(github.ref, 'refs/tags/release')
        steps:
            -   name: Configure AWS Credentials
                uses: aws-actions/configure-aws-credentials@v4
                with:
                    role-to-assume: ${{ secrets.AWS_ROLE_BUILDSYSTEM_ARN }}
                    aws-region: ${{ secrets.AWS_REGION }}

            -   name: Login to Amazon ECR
                id: login-ecr
                uses: aws-actions/amazon-ecr-login@v2

            -   name: Checkout Code
                uses: actions/checkout@v4

            -   name: Render ECS Task Definition
                id: render-ecs-task-definition
                env:
                    AWS_REGION: ${{ secrets.AWS_REGION }}
                    AWS_ROLE_TASK_EXECUTION_ARN: ${{ secrets.AWS_ROLE_TASK_EXECUTION_ARN }}
                    AWS_ROLE_TASK_ARN: ${{ secrets.AWS_ROLE_TASK_ARN }}
                    AWS_SECRETS_MANAGER_ARN: ${{ secrets.AWS_SECRETS_MANAGER_ARN }}
                    IMAGE_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                    IMAGE_REPOSITORY: ${{ env.PROJECT_NAME }}
                    IMAGE_TAG: ${{ needs.integration.outputs.IMAGE_TAG }}
                run: |
                    envsubst < ecs-task-definition.yaml > rendered-ecs-task-definition.yaml
                    echo "task_definition=rendered-ecs-task-definition.yaml" >> "$GITHUB_OUTPUT"

            -   name: Deploy ECS Task Definition
                uses: aws-actions/amazon-ecs-deploy-task-definition@v1
                with:
                    task-definition: ${{ steps.render-ecs-task-definition.outputs.task_definition }}
                    cluster: ${{ env.PROJECT_NAME }}
                    service: ${{ env.PROJECT_NAME }}
                    wait-for-service-stability: true
